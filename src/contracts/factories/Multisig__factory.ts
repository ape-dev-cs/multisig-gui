/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Multisig, MultisigInterface } from "../Multisig";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "signers_",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "sigsRequired_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ExecuteFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientSigs",
    type: "error",
  },
  {
    inputs: [],
    name: "NotSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "Signed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "Execute",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "Propose",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "Sign",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "execute",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "result",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "sigs",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "payload",
        type: "bytes",
      },
    ],
    name: "propose",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "sign",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "signed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "signer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sigsRequired",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200106f3803806200106f8339818101604052810190620000379190620001cb565b60005b8251811015620000eb5760016002600085848151811062000084577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806001019150506200003a565b5080600081905550505062000365565b6000620001126200010c846200024e565b62000225565b905080838252602082019050828560208602820111156200013257600080fd5b60005b858110156200016657816200014b888262000170565b84526020840193506020830192505060018101905062000135565b5050509392505050565b600081519050620001818162000331565b92915050565b600082601f8301126200019957600080fd5b8151620001ab848260208601620000fb565b91505092915050565b600081519050620001c5816200034b565b92915050565b60008060408385031215620001df57600080fd5b600083015167ffffffffffffffff811115620001fa57600080fd5b620002088582860162000187565b92505060206200021b85828601620001b4565b9150509250929050565b60006200023162000244565b90506200023f8282620002bb565b919050565b6000604051905090565b600067ffffffffffffffff8211156200026c576200026b620002f1565b5b602082029050602081019050919050565b60006200028a8262000291565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620002c68262000320565b810181811067ffffffffffffffff82111715620002e857620002e7620002f1565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200033c816200027d565b81146200034857600080fd5b50565b6200035681620002b1565b81146200036257600080fd5b50565b610cfa80620003756000396000f3fe60806040526004361061007f5760003560e01c806393ba3f151161004e57806393ba3f151461015c578063bdaa455314610185578063d3b73159146101c2578063fe0d94c1146101ed57610086565b8063013cf08b1461008b5780630536b723146100cb5780630c0512e9146101085780632fb1b25f1461013357610086565b3661008657005b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad919061095a565b61022b565b6040516100c29493929190610abb565b60405180910390f35b3480156100d757600080fd5b506100f260048036038101906100ed91906108c5565b610303565b6040516100ff9190610b07565b60405180910390f35b34801561011457600080fd5b5061011d610323565b60405161012a9190610b52565b60405180910390f35b34801561013f57600080fd5b5061015a6004803603810190610155919061095a565b610329565b005b34801561016857600080fd5b50610183600480360381019061017e91906108ee565b6104ae565b005b34801561019157600080fd5b506101ac60048036038101906101a79190610983565b610618565b6040516101b99190610b07565b60405180910390f35b3480156101ce57600080fd5b506101d7610647565b6040516101e49190610b52565b60405180910390f35b3480156101f957600080fd5b50610214600480360381019061020f919061095a565b61064d565b604051610222929190610b22565b60405180910390f35b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600201805461027a90610c24565b80601f01602080910402602001604051908101604052809291908181526020018280546102a690610c24565b80156102f35780601f106102c8576101008083540402835291602001916102f3565b820191906000526020600020905b8154815290600101906020018083116102d657829003601f168201915b5050505050908060030154905084565b60026020528060005260406000206000915054906101000a900460ff1681565b60015481565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103ac576040517fa1b035c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6004600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610441576040517f1da2cec500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003600082815260200190815260200160002060030160008154809291906001019190505550803373ffffffffffffffffffffffffffffffffffffffff167f9a10b6124411386407c4a174729b856d293832181c352e98b5cb316b96cd305960405160405180910390a350565b60006001600081548092919060010191905055905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200160008152506003600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020190805190602001906105bf9291906107ae565b5060608201518160030155905050803373ffffffffffffffffffffffffffffffffffffffff167f42681fc159c671d489c99c06f4693d03a705a21df2fbb2b84eedda79e0db4cff60405160405180910390a35050505050565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60005481565b600060606000600360008581526020019081526020016000209050600054816003015410156106a8576040517f8cf9936100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168160010154826002016040516106f99190610aa4565b60006040518083038185875af1925050503d8060008114610736576040519150601f19603f3d011682016040523d82523d6000602084013e61073b565b606091505b5080935081945050508261077b576040517fd6bed87300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b837fddb556f1d2c1ec821e910b019d3685b229db152a0ecd517ca7e24b8bd713928960405160405180910390a250915091565b8280546107ba90610c24565b90600052602060002090601f0160209004810192826107dc5760008555610823565b82601f106107f557805160ff1916838001178555610823565b82800160010185558215610823579182015b82811115610822578251825591602001919060010190610807565b5b5090506108309190610834565b5090565b5b8082111561084d576000816000905550600101610835565b5090565b60008135905061086081610c96565b92915050565b60008083601f84011261087857600080fd5b8235905067ffffffffffffffff81111561089157600080fd5b6020830191508360018202830111156108a957600080fd5b9250929050565b6000813590506108bf81610cad565b92915050565b6000602082840312156108d757600080fd5b60006108e584828501610851565b91505092915050565b6000806000806060858703121561090457600080fd5b600061091287828801610851565b9450506020610923878288016108b0565b935050604085013567ffffffffffffffff81111561094057600080fd5b61094c87828801610866565b925092505092959194509250565b60006020828403121561096c57600080fd5b600061097a848285016108b0565b91505092915050565b6000806040838503121561099657600080fd5b60006109a4858286016108b0565b92505060206109b585828601610851565b9150509250929050565b6109c881610ba9565b82525050565b6109d781610bbb565b82525050565b60006109e882610b82565b6109f28185610b8d565b9350610a02818560208601610bf1565b610a0b81610c85565b840191505092915050565b60008154610a2381610c24565b610a2d8186610b9e565b94506001821660008114610a485760018114610a5957610a8c565b60ff19831686528186019350610a8c565b610a6285610b6d565b60005b83811015610a8457815481890152600182019150602081019050610a65565b838801955050505b50505092915050565b610a9e81610be7565b82525050565b6000610ab08284610a16565b915081905092915050565b6000608082019050610ad060008301876109bf565b610add6020830186610a95565b8181036040830152610aef81856109dd565b9050610afe6060830184610a95565b95945050505050565b6000602082019050610b1c60008301846109ce565b92915050565b6000604082019050610b3760008301856109ce565b8181036020830152610b4981846109dd565b90509392505050565b6000602082019050610b676000830184610a95565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610bb482610bc7565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610c0f578082015181840152602081019050610bf4565b83811115610c1e576000848401525b50505050565b60006002820490506001821680610c3c57607f821691505b60208210811415610c5057610c4f610c56565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b610c9f81610ba9565b8114610caa57600080fd5b50565b610cb681610be7565b8114610cc157600080fd5b5056fea26469706673582212200719b60be41f2a11d9f657094737f500227dac89d48305d1ae69f5b111790e4764736f6c63430008040033";

type MultisigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultisigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multisig__factory extends ContractFactory {
  constructor(...args: MultisigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    signers_: string[],
    sigsRequired_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Multisig> {
    return super.deploy(
      signers_,
      sigsRequired_,
      overrides || {}
    ) as Promise<Multisig>;
  }
  getDeployTransaction(
    signers_: string[],
    sigsRequired_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(signers_, sigsRequired_, overrides || {});
  }
  attach(address: string): Multisig {
    return super.attach(address) as Multisig;
  }
  connect(signer: Signer): Multisig__factory {
    return super.connect(signer) as Multisig__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultisigInterface {
    return new utils.Interface(_abi) as MultisigInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multisig {
    return new Contract(address, _abi, signerOrProvider) as Multisig;
  }
}
