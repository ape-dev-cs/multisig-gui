/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MultisigInterface extends utils.Interface {
  functions: {
    "execute(uint256)": FunctionFragment;
    "proposalCounter()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address,uint256,bytes)": FunctionFragment;
    "sign(uint256)": FunctionFragment;
    "signed(uint256,address)": FunctionFragment;
    "signer(address)": FunctionFragment;
    "sigsRequired()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "sign", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "signed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "signer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sigsRequired",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sigsRequired",
    data: BytesLike
  ): Result;

  events: {
    "Execute(uint256)": EventFragment;
    "Propose(address,uint256)": EventFragment;
    "Sign(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Propose"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sign"): EventFragment;
}

export type ExecuteEvent = TypedEvent<[BigNumber], { proposal: BigNumber }>;

export type ExecuteEventFilter = TypedEventFilter<ExecuteEvent>;

export type ProposeEvent = TypedEvent<
  [string, BigNumber],
  { proposer: string; proposal: BigNumber }
>;

export type ProposeEventFilter = TypedEventFilter<ProposeEvent>;

export type SignEvent = TypedEvent<
  [string, BigNumber],
  { signer: string; proposal: BigNumber }
>;

export type SignEventFilter = TypedEventFilter<SignEvent>;

export interface Multisig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultisigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    execute(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposalCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        target: string;
        value: BigNumber;
        payload: string;
        sigs: BigNumber;
      }
    >;

    propose(
      target: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sign(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    signer(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    sigsRequired(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  execute(
    proposal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      target: string;
      value: BigNumber;
      payload: string;
      sigs: BigNumber;
    }
  >;

  propose(
    target: string,
    value: BigNumberish,
    payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sign(
    proposal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signed(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sigsRequired(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    execute(
      proposal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; result: string }>;

    proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        target: string;
        value: BigNumber;
        payload: string;
        sigs: BigNumber;
      }
    >;

    propose(
      target: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sign(proposal: BigNumberish, overrides?: CallOverrides): Promise<void>;

    signed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signer(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    sigsRequired(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Execute(uint256)"(proposal?: BigNumberish | null): ExecuteEventFilter;
    Execute(proposal?: BigNumberish | null): ExecuteEventFilter;

    "Propose(address,uint256)"(
      proposer?: string | null,
      proposal?: BigNumberish | null
    ): ProposeEventFilter;
    Propose(
      proposer?: string | null,
      proposal?: BigNumberish | null
    ): ProposeEventFilter;

    "Sign(address,uint256)"(
      signer?: string | null,
      proposal?: BigNumberish | null
    ): SignEventFilter;
    Sign(
      signer?: string | null,
      proposal?: BigNumberish | null
    ): SignEventFilter;
  };

  estimateGas: {
    execute(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      target: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sign(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signer(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sigsRequired(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    execute(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposalCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      target: string,
      value: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sign(
      proposal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signed(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signer(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sigsRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
